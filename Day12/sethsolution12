def instructionHandler(s):
    """input: a string of instructions
    output: a list of digits set up for other functions here to process
    """
    output = []
    s = s.split('<->')
    output.append(int(s[0]))
    nodes = set([int(node) for node in s[1].split(',')])
    output.append(nodes)
    
    return output

def connectionConstructor(d, l):
    """input: a dictionary, d, and a list of instructions formatted correctly, l
    output: a dictionary listing "connections" for each value in the input list
    """
    assert type(d) == dict
    assert type(l) == list
    
    d[l[0]] = l[1]
    
    return connections

def getGraph(d, i, nodesChecked):
    """input: a dictionary of nodes : edges, an integer to build a set for,
    and a list of nodes that the function has already checked
    output: a set of all edges matching d[i]
    """
    
    assert type(d) == dict
    assert type(i) == int
    
    edgeSet = d[i]
    edgeSet.add(i)
    nodesChecked.add(i)
    
    for node in d[i]:
        if node not in nodesChecked:
            edgeSet = edgeSet|getGraph(d,node,nodesChecked)
    return edgeSet

def edgeListBuilder(d, i):
    """input: a dictionary of nodes : edges, an integer for which to build the
    graph
    output: a set of all edges matching d[i]
    this is a shell function to use with getGraph()
    """
    nodesChecked = set()

    return getGraph(d,i,nodesChecked)

def dictCleaner(d, s):
    """input: a dictionary of nodes:edges and a set of numbers to be removed
    output: a dictionary minus all the values in set s
    """
    for node in s:
        if node in d:
            del d[node]
    return d

def partB(d):
    """input: a dictionary of nodes:edges
    output: an integer, the number of isolated 'groups' in the dictionary
    """
    counter = 0 #how many times the loop executes, therefore, # of groups
    group = set() #stores the current 'group'
    
    while d:
        keylist = [i for i in d.keys()]
        group = edgeListBuilder(d,keylist[0])
        d = dictCleaner(d,group)
        counter += 1
    
    return counter

f = open('sethinput.txt', 'r')
data = f.readlines()

connections = {} #this dictionary will contain the graph

for instruction in data: #build the dictionary
    connectionConstructor(connections,instructionHandler(instruction))

answer = edgeListBuilder(connections,0) #generate a list of all edges for this integer

print('answer to part a is', len(answer))

"""part b: gradually remove all groups from the dictionary until
it's empty, counting groups as you go
"""

print('part b answer is', partB(connections))
